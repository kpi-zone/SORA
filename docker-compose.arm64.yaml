services:
  # ---------------------
  # Cube.js (Semantic Layer / Analytical Backend)
  # ---------------------
  cubejs:
    image: cubejs/cube:latest # Official Cube.js image
    container_name: cubejs # Explicit container name for easier referencing
    build:
      context: ./cubejs # Optional: build Cube.js from local Dockerfile (custom setup)
    networks:
      - vero # Shared network for inter-service communication
    ports:
      - "4000:4000" # Cube.js REST API (host:container)
      - "15432:15432" # Cube SQL API using PostgreSQL wire protocol
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/readyz"] # Healthcheck for Cube.js
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    env_file:
      - ./cubejs/.env.dev # Environment variables for Cube.js (local dev only)
    volumes:
      - ./cubejs/model:/cube/conf/model # Mount data models (schemas)
      - ./cubejs/views:/cube/conf/model/views # Mount view definitions
    depends_on:
      data-warehouse: # Cube.js requires the PostgreSQL data warehouse to be running first
        condition: service_healthy # cubejs will only start once data-warehouse is healthy

  # ---------------------
  # PostgreSQL (Data Warehouse for Cube.js)
  # ---------------------
  data-warehouse:
    image: postgres:16 # Official PostgreSQL image
    container_name: postgres
    build:
      context: ./db # Optional: use a custom Dockerfile or init scripts
    networks:
      - vero
    ports:
      - "5432:5432" # Default PostgreSQL port exposed for local access
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d vero-demo-db"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./db/.env.dev # Contains DB name, user, and password for Cube.js
    volumes:
      - data-warehouse-db-data:/var/lib/postgresql/data # Persistent storage for PostgreSQL data

  # ---------------------
  # MCP Server (Custom AI Agent / API Middleware)
  # ---------------------
  mcp-server:
    container_name: mcp-server
    build:
      context: ./mcp-server # Custom backend build context
    depends_on:
      cubejs:
        condition: service_healthy # MCP will only start once Cube.js is healthy
    restart: on-failure # Auto-restart if the container crashes
    networks:
      - vero
    ports:
      - "9000:9000" # MCP Server API port for SSE and AI middleware
    env_file:
      - ./mcp-server/.env.dev # Dev environment config (includes secret tokens, etc.)
    command: # Command-line args passed to the MCP process
      - --endpoint
      - ${MCP_ENDPOINT} # URL of the Cube.js backend
      - --api_secret
      - ${MCP_API_SECRET} # Secret used for authentication

  # ---------------------
  # Metabase (BI Dashboard / Analytics Frontend)
  # ---------------------
  metabase:
    image: stephaneturquay/metabase-arm64:latest # ARM64-compatible Metabase image
    container_name: metabase
    ports:
      - "3000:3000" # Metabase web UI
    env_file:
      - ./metabase/.env.dev # Configuration for DB access, credentials, etc.
    depends_on:
      metabase-db:
        condition: service_healthy # Metabase starts after DB is ready
    volumes:
      - metabase-data:/metabase-data # Persistent Metabase application data
    networks:
      - vero

  # ---------------------
  # PostgreSQL for Metabase (stores application metadata and configs)
  # ---------------------
  metabase-db:
    image: postgres:13 # Stable, compatible version of PostgreSQL for Metabase
    container_name: metabase-db
    env_file:
      - ./metabase/.env.dev # Username, password, and database name
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d metabase"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - metabase-db-data:/var/lib/postgresql/data # Persistent Metabase DB storage
    networks:
      - vero

  # ---------------------
  # Agno AI Agent (Streamlit-based interface for testing AI functions)
  # ---------------------
  agno:
    container_name: agno
    build:
      context: ./agno # Custom Streamlit agent build context
    volumes:
      - ./agno/src:/app/src # Mount source code into container
      - ./agno/logs:/app/logs # Persist logs outside container
    ports:
      - "8505:8505" # Streamlit server port for accessing the agent UI
    env_file:
      - ./agno/.env # OpenAI Key and MCP Server Connection
    networks:
      - vero

  # ---------------------
  # n8n Server
  # ---------------------
  n8n:
    container_name: n8n
    image: n8nio/n8n:latest
    depends_on:
      n8n_db:
        condition: service_healthy
    ports:
      - "5678:5678"
    volumes:
      - ./n8n-data:/home/node/.n8n
    networks:
      - vero

  n8n_db:
    image: postgres:15
    container_name: n8n-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=n8n
      - POSTGRES_DB=n8n
    volumes:
      - n8n-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d n8n"]
      interval: 5s
      timeout: 5s
      retries: 5

# ---------------------
# Volumes for Persistence
# ---------------------
volumes:
  metabase-db-data: # Volume for Metabase's PostgreSQL database
  metabase-data: # Volume for Metabase application state
  data-warehouse-db-data: # Volume for Cube.js PostgreSQL database
  n8n-data: # Volume for n8n instance
  n8n-db-data: # Volume for n8n's PostgreSQL database

# ---------------------
# Shared Network
# ---------------------
networks:
  vero:
    driver: bridge # Bridge network for cross-service communication
